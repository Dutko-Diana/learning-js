// Для кожної з них визначений стандартний HTTP-метод.

// POST (Create) — створити новий ресурс.
// GET (Read) — отримати набір ресурсів або один ресурс за ідентифікатором.
// PUT і PATCH (Update) — оновити ресурс за ідентифікатором.
// DELETE (Delete) — видалити ресурс за ідентифікатором.

// HTTP-метод GET використовується для отримання існуючих даних.

// Метод fetch() повинен відправити на сервер GET-запит без тіла. Бекенд після отримання запиту обробить його і у відповіді поверне необхідні ресурси.

// Отримаємо масив усіх постів. З цією метою звертаємося до ресурсу /posts, описаного в документації бекенду. Метод fetch() за замовчуванням робить GET-запит, тому необов'язково перевизначати опції запиту.

fetch("https://jsonplaceholder.typicode.com/posts")
  .then((response) => {
    if (!response.ok) {
      throw new Error(response.status);
    }
    return response.json();
  })
  .then((posts) => console.log(posts))
  .catch((error) => console.log(error));

//   Отримаємо один пост за ідентифікатором (властивість id), додавши його до ресурсу /posts/:postId.

// Остання частина цього шляху (:postId) називається динамічний параметр і в документації описується як /ресурс/:параметр. Динамічні параметри виділяються двокрапкою : на початку. Вона використовується тільки для позначення, що це динамічний параметр, у сам рядок запиту вона не потрапляє. Використання динамічних параметрів сам ресурс (шлях до цілої колекції) не змінює, але змінюється значення динамічного параметра для кожного її елемента.

// Change this number to fetch different post
const postId = 1;

fetch(`https://jsonplaceholder.typicode.com/posts/${postId}`);


// Метод POST використовується для додавання нового ресурсу.

// Для того щоб передати дані на сервер, використовується тіло HTTP-запиту — частина запиту, що містить дані, які передаються на сервер.

// Тіло запиту може бути порожнім, якщо клієнт просто надсилає запит без додаткових даних. Однак у POST-запитах тіло містить корисну інформацію, таку як дані форми, JSON-об'єкти, файли або будь-які інші дані, які сервер повинен обробити. Заголовок Content-Type вказує на тип даних у тілі запиту і допомагає серверу правильно їх обробити.

// Метод fetch() повинен відправити POST-запит на сервер, у тілі якого буде об'єкт з полями title і body, ідентифікатор буде автоматично створений бекендом. Результатом такого запиту буде об'єкт, доданий у базу даних бекенда.

const postToAdd = {
  title: "CRUD",
  body: "CRUD is awesome!",
};

const options = {
  method: "POST",
  body: JSON.stringify(postToAdd),
  headers: {
    "Content-Type": "application/json; charset=UTF-8",
  },
};

fetch("https://jsonplaceholder.typicode.com/posts", options)
  .then((response) => {
    if (!response.ok) {
      throw new Error(response.status);
    }
    return response.json();
  })
  .then(post => console.log(post))
  .catch(error => console.log(error));

// У прикладі вище ми:

// Робимо запит на створення поста, звертаючись до ресурсу /posts, але в об’єкті налаштування options методу fetch() змінюємо HTTP-метод на POST. Таким чином, бекенд знає, що потрібно не прочитати вже існуючий, а створити новий ресурс у цій колекції.
// Тіло запиту повинно бути рядком, тому що протокол HTTP передає все як текст. При передачі складних типів даних, їх обов'язково необхідно привести до рядка методом JSON.stringify().
// Не забуваємо вказати заголовок Content-Type, який уточнює для бекенду тип переданих даних.

// У відповідь, якщо все добре, отримаємо JSON представлення новоствореного поста, але вже з доданим id. Ідентифікатор буде унікальним для кожного об'єкта.

{
  "id": 101,
  "title": "CRUD",
  "body": "CRUD is awesome!"
}

// Методи PUT і PATCH використовуються для оновлення існуючих даних.

// За HTTP-стандартом:

// метод PATCH замінює в наявному ресурсі значення, які були передані в тілі запиту. Значення ресурсу, які не передавались, лишаться без змін;
// метод PUT повністю замінює ресурс. Значення ресурсу, які не передавались, видаляються з ресурсу.

// Який саме метод використовувати, буде написано в документації бекенду.

// Метод fetch() повинен відправити на сервер запит, у тілі якого необхідно вказати об'єкт із полями для зміни. Шлях вказує, у якій колекції і який елемент потрібно оновити. Бекенд після отримання запиту обробить його і у відповіді поверне оновлений ресурс.

// Change value of id property to update different post
const postToUpdate = {
  id: 1,
  body: "CRUD is really awesome!",
};

const options = {
  method: "PATCH",
  body: JSON.stringify(postToUpdate),
  headers: {
    "Content-Type": "application/json; charset=UTF-8",
  },
};

fetch(`https://jsonplaceholder.typicode.com/posts/${postToUpdate.id}`, options)
  .then((response) => {
    if (!response.ok) {
      throw new Error(response.status);
    }
    return response.json();
  })
  .then(post => console.log(post))
  .catch(error => console.log("ERROR:", error));



//   Метод DELETE використовується для видалення існуючих даних.

// Метод fetch() повинен відправити на сервер DELETE-запит без тіла. Шлях вказує, у якій колекції і який елемент ми хочемо видалити.

// Бекенд після отримання запиту обробить його, видалить ресурс із колекції і у відповіді поверне статус результату і видалений елемент.

const postIdToDelete = 1;

fetch(`https://jsonplaceholder.typicode.com/posts/${postIdToDelete}`, {
  method: "DELETE",
})
  .then((response) => {
    if (!response.ok) {
      throw new Error(response.status);
    }
    return response.json();
  })
  .then((deletedPost) => console.log(deletedPost))
  .catch(error => console.log("Error:", error));




//   AJAX (Asynchronous JavaScript and XML) — метод отримання або відправлення даних з подальшим оновленням інтерфейсу за цими даними, без потреби перезавантаження сторінки. Завдяки цьому зменшується час відгуку і вебсторінка стає інтерактивнішою.

// Цей процес можна розібрати на прикладі завантаження даних.

// На вебсторінці відбувається подія (сторінка завантажується, натискається кнопка “Показати більше”, відправляється форма тощо).
// На клієнті за допомогою JavaScript реакцією на цю подію буде виконуватися функція для роботи з сервером, де створюється і відправляється HTTP-запит.
// Сервер отримує й обробляє HTTP-запит, відправляючи назад у відповіді дані у форматі JSON.
// На клієнті за допомогою JavaScript відповідь від сервера обробляється, зчитуються дані і оновлюється інтерфейс.

// Незважаючи на те, що в назві технології присутній XML, у сучасному інтернеті його замінив JSON, а назву залишили як данину пам'яті. AJAX трактується як будь-яке спілкування з сервером без перезавантаження сторінки.


// Параметри запиту дозволяють вказати бекенду додаткові критерії, наприклад:

// скільки елементів колекції ми хочемо отримати в запиті;
// можливо, необхідно додати сортування за якоюсь властивістю об'єкта;
// обмежити вибірку тощо.


// Список параметрів запиту, їх назви і можливі значення залежать від бекенду і описані в документації до нього.

// Символ ? вказує на початок параметрів запиту. Кожен параметр — це пара ім'я=значення.

// У рядку запиту параметри між собою розділяються символом &.

// У документації JSONPlaceholder API описано можливі параметри рядка запиту:

// _limit, який контролює кількість елементів у відповіді;
// _sort, який відповідає за порядок сортування об'єктів у масиві.


fetch("https://jsonplaceholder.typicode.com/users?_limit=7&_sort=name")

// GET-запит у прикладі вище поверне масив із семи користувачів (загалом їх 10), відсортованих за ім'ям (поле name) за алфавітним порядком. Підкреслення в іменах параметрів специфічні для цього бекенда, це не якийсь стандарт.


// Параметрів може бути багато, і незручно складати з них один довгий рядок як для читабельності, так і для його подальшого редагування.

// Під час складання рядків параметрів, створюється екземпляр класу URLSearchParams та ініціалізується об'єктом. Результатом буде спеціальний об'єкт (ітератор) з методами, який у рядковому перетворенні повертає результат виклику методу toString() — своє рядкове відображення.

const searchParams = new URLSearchParams({
  _limit: 5,
  _sort: "name",
});

console.log(searchParams.toString()); // "_limit=5&_sort=name"
const url = `https://jsonplaceholder.typicode.com/users?${searchParams}`;
console.log(url); // "https://jsonplaceholder.typicode.com/users?_limit=5&_sort=name"


// У рядковому вигляді властивості об'єкта стануть параметрами та їх значеннями. Параметри будуть розділені символом &. У разі інтерполяції значення в шаблонних рядках відбувається його неявне перетворення в рядок, тому не потрібно викликати метод toString() під час складання URL. Не забувай вказувати початок рядка запиту символом ?.